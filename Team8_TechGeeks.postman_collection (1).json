{
	"info": {
		"_postman_id": "d9e1ac1d-ff05-4386-8429-2be9c15bd8cf",
		"name": "Team8_TechGeeks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33410533",
		"_collection_link": "https://warped-water-815310.postman.co/workspace/Team8APIHackathon~1d815ffb-d128-43a4-80ea-f478739ea3de/collection/33410533-d9e1ac1d-ff05-4386-8429-2be9c15bd8cf?action=share&source=collection_link&creator=33410533"
	},
	"item": [
		{
			"name": "User Login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program Module",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = generateSerialNumber();",
									"",
									"pm.variables.set('serialNumber', serialNumber);",
									"",
									"function generateSerialNumber() {",
									"  let serialNumber = '';",
									"  for (let i = 0; i < 4; i++) {",
									"    const digit = Math.floor(Math.random() * 30);",
									"    serialNumber += digit;",
									"  }",
									"  return serialNumber;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201)",
									"{",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status Line Validation\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"    // pm.test(\"Content-Type header validation\", () => {",
									"    //     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    // });",
									"",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    const response = JSON.parse(pm.response.text());",
									"    pm.globals.set(\"programId\", response.programId);",
									"    pm.globals.set(\"programName\", response.programName);",
									"    pm.globals.set(\"programStatus\", response.programStatus);",
									"    pm.globals.set(\"programDescription\", response.programDescription);",
									"",
									"    //const response = pm.response.json();",
									"    const programIdresponse = response.programId;",
									"    const programNameresponse = response.programName;",
									"",
									"    if (programNameresponse == \"Mar24-TechGeeks-SDET-\")",
									"    {",
									"    pm.globals.set(\"programId\",programIdresponse);",
									"    pm.globals.set(\"programName\",programNameresponse);    ",
									"    }",
									"    else if(programNameresponse == \"Mar24-TechGeeks-DA-\")",
									"    {",
									"    pm.globals.set(\"programId1\",programIdresponse);",
									"    pm.globals.set(\"programName1\",programNameresponse);",
									"    }",
									"",
									"} ",
									"",
									"",
									" if (pm.response.code == 400)",
									"{",
									"    pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.globals.set(\"programId\", 0);",
									"    pm.globals.set(\"programName\", null);",
									"    pm.globals.set(\"programStatus\", null);",
									"    pm.globals.set(\"programDescription\", null);",
									"postman.setNextRequest(\"Create Batch\")",
									"",
									"}",
									"",
									"// const iterationCount = pm.info.iterationCount;",
									"// console.log(iterationCount);",
									"// const currentIteration = (pm.info.iteration);",
									"// console.log(currentIteration);",
									"// pm.collectionVariables.set(\"currentIteration\", currentIteration);",
									"// pm.collectionVariables.set(\"iterationCount\", iterationCount);",
									"// if ((currentIteration + 1) < iterationCount)",
									"// {",
									"//     postman.setNextRequest(null);",
									"// }",
									"// else",
									"// {",
									"//     postman.setNextRequest(\"GetAllPrograms\");",
									"// }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{program_description}}\",\n  \"programName\": \"{{program_name}}{{serialNumber}}\",\n  \"programStatus\": \"{{program_status}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/saveprogram",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPrograms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// var statusCode = pm.response.statusCode\r",
									"// if (statusCode === 200){\r",
									"//     console.log(\"status code is 200 -successful\")\r",
									"//     pm.test(\"check program name Datatype\",()=> {\r",
									"//         pm.expect(typeof pm.response.json().programName ).to.equal('string')\r",
									"//     });\r",
									"//     pm.test (\"check program discription data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programDescription).to.equal('string')\r",
									"\r",
									"//     });\r",
									"//     pm.test(\"check program status data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programStatus).to.equal('string')\r",
									"\r",
									"//     });\r",
									"\r",
									"//     pm.test(\" status line validation \", ()=> {\r",
									"//     pm. response.to.have.status(\"ok\");\r",
									"//  });\r",
									"    \r",
									"//     pm.test(\"Content-Type validation\", function () {\r",
									"//         pm.response.to.have.header(\"Content-Type\"). to.include(\"text/plain\");\r",
									"//     });\r",
									"// }\r",
									"// else if (statusCode===400){\r",
									"//     console.log(\"status code is 400-Bad request\")\r",
									"// pm.test(\"statusCode is 400\",()=>{\r",
									"//  pm.response.to.have.status(400);\r",
									"// });\r",
									"//  pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Bad request\");\r",
									"//  });\r",
									"// }\r",
									"// else if(statusCode===401){\r",
									"//     pm.test(\"statusCode is 401\",()=>{\r",
									"//         pm.response.to.have.statusCode(401);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"unauthorized\");\r",
									"//  }); \r",
									"// }\r",
									"// else if (statusCode === 404) {\r",
									"// pm.test(\"Content-Type is present\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"//  pm.test(\"statusCode is 404\",()=>{\r",
									"//         pm.response.to.have.statusCode(404);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Not found\");\r",
									"//  });\r",
									"\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/allPrograms",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramByProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// var statusCode = pm.response.statusCode\r",
									"// if (statusCode === 200){\r",
									"//     console.log(\"status code is 200 -successful\")\r",
									"//     pm.test(\"check program name Datatype\",()=> {\r",
									"//         pm.expect(typeof pm.response.json().programName ).to.equal('string')\r",
									"//     });\r",
									"//     pm.test (\"check program discription data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programDescription).to.equal('string')\r",
									"\r",
									"//     });\r",
									"//     pm.test(\"check program status data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programStatus).to.equal('string')\r",
									"\r",
									"//     });\r",
									"\r",
									"//     pm.test(\" status line validation \", ()=> {\r",
									"//     pm. response.to.have.status(\"ok\");\r",
									"//  });\r",
									"    \r",
									"//     pm.test(\"Content-Type validation\", function () {\r",
									"//         pm.response.to.have.header(\"Content-Type\"). to.include(\"text/plain\");\r",
									"//     });\r",
									"// }\r",
									"// else if (statusCode===400){\r",
									"//     console.log(\"status code is 400-Bad request\")\r",
									"// pm.test(\"statusCode is 400\",()=>{\r",
									"//  pm.response.to.have.status(400);\r",
									"// });\r",
									"//  pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Bad request\");\r",
									"//  });\r",
									"// }\r",
									"// else if(statusCode===401){\r",
									"//     pm.test(\"statusCode is 401\",()=>{\r",
									"//         pm.response.to.have.statusCode(401);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"unauthorized\");\r",
									"//  }); \r",
									"// }\r",
									"// else if (statusCode === 404) {\r",
									"// pm.test(\"Content-Type is present\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"//  pm.test(\"statusCode is 404\",()=>{\r",
									"//         pm.response.to.have.statusCode(404);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Not found\");\r",
									"//  });\r",
									"\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllProgramsWithUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// if (pm.response.code === 200) {\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"  \r",
									"// //  pm.test(\"Content-Type validation\", function () {\r",
									"// //         pm.response.to.have.header(\"Content-Type\"). to.include(\"text/plain\");\r",
									"// //     });\r",
									"\r",
									"//   }\r",
									"//   else if (pm.response.code === 400) {\r",
									"//     pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"//    //console.log(\"Status code is 400 - Bad Request\");\r",
									"  \r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Bad request\");\r",
									"//    });\r",
									"// }\r",
									"//   else  {\r",
									"//     console.log(\"Unexpected status code:\", pm.response.code);\r",
									"//     console.log(\"Unexpected status Reason:\", pm.response.text());\r",
									"    \r",
									"//   }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/allProgramsWithUsers",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"allProgramsWithUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program ID without Program Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 500)",
									"{",
									"    pm.test(\"Status code is 500\", function () {",
									"        pm.response.to.have.status(500);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Internal Server Error\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"timestamp\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"            \"type\": \"integer\"",
									"            },",
									"            \"error\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"path\": {",
									"            \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"timestamp\",",
									"            \"status\",",
									"            \"error\",",
									"            \"path\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.error).to.eql(\"Internal Server Error\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program ID with Invalid Program Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 400)",
									"{",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Bad Request\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"success\": {",
									"            \"type\": \"boolean\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"message\",",
									"            \"success\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.message).to.eql(\"Invalid Status: must be Active or Inactive\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"INVALID_PROGRAM_STATUS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program ID without Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 500)",
									"{",
									"    pm.test(\"Status code is 500\", function () {",
									"        pm.response.to.have.status(500);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Internal Server Error\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"timestamp\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"            \"type\": \"integer\"",
									"            },",
									"            \"error\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"path\": {",
									"            \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"timestamp\",",
									"            \"status\",",
									"            \"error\",",
									"            \"path\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.error).to.eql(\"Internal Server Error\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program Name with Invalid Program Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 400)",
									"{",
									"    pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Bad Request\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"success\": {",
									"            \"type\": \"boolean\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"message\",",
									"            \"success\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.message).to.eql(\"Invalid Status: must be Active or Inactive\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"INVALID_PROGRAM_STATUS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/program/{{programName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program Name without Program Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 500)",
									"{",
									"    pm.test(\"Status code is 500\", function () {",
									"        pm.response.to.have.status(500);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Internal Server Error\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"timestamp\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"            \"type\": \"integer\"",
									"            },",
									"            \"error\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"path\": {",
									"            \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"timestamp\",",
									"            \"status\",",
									"            \"error\",",
									"            \"path\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.error).to.eql(\"Internal Server Error\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/program/{{programName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Invalid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 404)",
									"{",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Not Found\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"success\": {",
									"            \"type\": \"boolean\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"message\",",
									"            \"success\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.message).to.include(\"no list with such program name\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"INVALID_PROGRAM_NAME\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/program/INVALID_PROGRAM_NAME",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"program",
								"INVALID_PROGRAM_NAME"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Invalid Program ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 404)",
									"{",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"Not Found\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"message\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"success\": {",
									"            \"type\": \"boolean\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"message\",",
									"            \"success\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"",
									"    pm.test(\"Response Message Validation\", function () {",
									"        const response = JSON.parse(pm.response.text());",
									"        pm.expect(response.message).to.include(\"not found\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/-1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"OK\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"programId\": {",
									"            \"type\": \"integer\"",
									"            },",
									"            \"programName\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"programDescription\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"programStatus\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"creationTime\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"lastModTime\": {",
									"            \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"programId\",",
									"            \"programName\",",
									"            \"programDescription\",",
									"            \"programStatus\",",
									"            \"creationTime\",",
									"            \"lastModTime\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}-V2\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Valid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Status Line Validation\", function () {",
									"        pm.response.to.have.status(\"OK\");",
									"    });",
									"",
									"    const schema = {",
									"        \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"programId\": {",
									"            \"type\": \"integer\"",
									"            },",
									"            \"programName\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"programDescription\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"programStatus\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"creationTime\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"lastModTime\": {",
									"            \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [",
									"            \"programId\",",
									"            \"programName\",",
									"            \"programDescription\",",
									"            \"programStatus\",",
									"            \"creationTime\",",
									"            \"lastModTime\"",
									"        ]",
									"    }",
									"",
									"    pm.test(\"Content-Type header validation\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    });",
									"",
									"    pm.test(\"Response Contains valid Json data\", ()=>{",
									"        pm.response.to.have.jsonSchema(schema);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}-V3\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/program/{{programName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"program",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramByProgramIdAfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// var statusCode = pm.response.statusCode\r",
									"// if (statusCode === 200){\r",
									"//     console.log(\"status code is 200 -successful\")\r",
									"//     pm.test(\"check program name Datatype\",()=> {\r",
									"//         pm.expect(typeof pm.response.json().programName ).to.equal('string')\r",
									"//     });\r",
									"//     pm.test (\"check program discription data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programDescription).to.equal('string')\r",
									"\r",
									"//     });\r",
									"//     pm.test(\"check program status data type\",()=>{\r",
									"//         pm.expect(typeof pm.response.json().programStatus).to.equal('string')\r",
									"\r",
									"//     });\r",
									"\r",
									"//     pm.test(\" status line validation \", ()=> {\r",
									"//     pm. response.to.have.status(\"ok\");\r",
									"//  });\r",
									"    \r",
									"//     pm.test(\"Content-Type validation\", function () {\r",
									"//         pm.response.to.have.header(\"Content-Type\"). to.include(\"text/plain\");\r",
									"//     });\r",
									"// }\r",
									"// else if (statusCode===400){\r",
									"//     console.log(\"status code is 400-Bad request\")\r",
									"// pm.test(\"statusCode is 400\",()=>{\r",
									"//  pm.response.to.have.status(400);\r",
									"// });\r",
									"//  pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Bad request\");\r",
									"//  });\r",
									"// }\r",
									"// else if(statusCode===401){\r",
									"//     pm.test(\"statusCode is 401\",()=>{\r",
									"//         pm.response.to.have.statusCode(401);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"unauthorized\");\r",
									"//  }); \r",
									"// }\r",
									"// else if (statusCode === 404) {\r",
									"// pm.test(\"Content-Type is present\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"//  pm.test(\"statusCode is 404\",()=>{\r",
									"//         pm.response.to.have.statusCode(404);\r",
									"//     });\r",
									"\r",
									"//    pm.test(\" status line validation \", ()=> {\r",
									"// pm. response.to.have.status(\"Not found\");\r",
									"//  });\r",
									"\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch Module",
			"item": [
				{
					"name": "Create Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = generateSerialNumber();\r",
									"function generateSerialNumber() {\r",
									"  let serialNumber = '';\r",
									"  for (let i = 0; i < 4; i++) {\r",
									"    const digit = Math.floor(Math.random() * 3);\r",
									"    serialNumber += digit;\r",
									"  }\r",
									"  return serialNumber;\r",
									"}\r",
									"pm.variables.set('serialNumber', serialNumber);\r",
									"\r",
									"//pm.collectionVariables.set(\"batchNoOfClasses\",batchNoOfClasses[batchclassIndex]);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"if (pm.response.code == 201)\r",
									"{\r",
									"      pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"\r",
									"    \r",
									"    const batchIdresponse = response.batchId;\r",
									"    const batchNameresponse = response.batchName;\r",
									"\r",
									"    if (batchNameresponse == \"March24-TechGeeks-SDET-SDET01-\")\r",
									"    {\r",
									"    pm.globals.set(\"batchId\",batchIdresponse);\r",
									"    pm.globals.set(\"batchName\",batchNameresponse);    \r",
									"    }\r",
									"    else if(batchNameresponse == \"March24-TechGeeks-DA-SDET01-\")\r",
									"    {\r",
									"    pm.globals.set(\"batchId2\",batchIdresponse);\r",
									"    pm.globals.set(\"batchName2\",batchNameresponse);\r",
									"    }\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"// });\r",
									"    \r",
									"// pm.test(\"BatchName has teamName\", function () {\r",
									"//         pm.expect(pm.response.batchName).to.include(\"TechGeeks\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"    \r",
									"pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"\r",
									"});\r",
									"postman.setNextRequest(\"By BatchID\");\r",
									"\r",
									"} \r",
									"else if (pm.response.code == 400)\r",
									"{\r",
									"      pm.test(\"Status code is 400\", function () \r",
									"      {\r",
									"        pm.response.to.have.status(400);\r",
									"       });\r",
									"       postman.setNextRequest(\"Create User\")\r",
									"}\r",
									"\r",
									"// const iterationCount = pm.info.iterationCount;\r",
									"// console.log(iterationCount);\r",
									"// const currentIteration = (pm.info.iteration);\r",
									"// console.log(currentIteration);\r",
									"// pm.collectionVariables.set(\"currentIteration\", currentIteration);\r",
									"// pm.collectionVariables.set(\"iterationCount\", iterationCount);\r",
									"// if ((currentIteration + 1) < iterationCount)\r",
									"// {\r",
									"//     postman.setNextRequest(null);\r",
									"// }\r",
									"// else\r",
									"// {\r",
									"//     postman.setNextRequest(\"By BatchID\");\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batch_description}}\",\r\n  \"batchName\": \"{{batch_name}}-{{serialNumber}}\",\r\n  \"batchNoOfClasses\":{{batch_no_of_classes}},\r\n  \"batchStatus\": \"{{batch_status}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "By BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () \r",
									"      {\r",
									"        pm.response.to.have.status(200);\r",
									"       });\r",
									"       \r",
									"}else {pm.test(\"Status code is 404\", function () \r",
									"      {\r",
									"        pm.response.to.have.status(404);\r",
									"       });}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By ProgramID with Active status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch all batches using the searchstring",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches{{searchString}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches{{searchString}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By exact batchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/{{batchName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchId with valid batchName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = generateSerialNumber();\r",
									"function generateSerialNumber() {\r",
									"  let serialNumber = '';\r",
									"  for (let i = 0; i < 4; i++) {\r",
									"    const digit = Math.floor(Math.random() * 3);\r",
									"    serialNumber += digit;\r",
									"  }\r",
									"  return serialNumber;\r",
									"}\r",
									"pm.variables.set('serialNumber', serialNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{CreateBatchName}}-{{serialNumber}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchdescription by alphanumeric characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = generateSerialNumber();\r",
									"function generateSerialNumber() {\r",
									"  let serialNumber = '';\r",
									"  for (let i = 0; i < 4; i++) {\r",
									"    const digit = Math.floor(Math.random() * 3);\r",
									"    serialNumber += digit;\r",
									"  }\r",
									"  return serialNumber;\r",
									"}\r",
									"pm.variables.set('serialNumber', serialNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//     //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}-123\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchId with valid batchNoOfClasses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let batchNoOfClasses = [\"7\",\"9\",\"40\",\"25\",\"32\"];\r",
									"let randombatchNoOfClasses = _.sample(batchNoOfClasses);\r",
									"\r",
									"pm.collectionVariables.set(\"batchNoOfClasses\",randombatchNoOfClasses);\r",
									"console.log(pm.collectionVariables.get(\"batchNoOfClasses\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{CreateBatchName}}-{{serialNumber}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchId with valid programId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const serialNumber = generateSerialNumber();\r",
									"function generateSerialNumber() {\r",
									"  let serialNumber = '';\r",
									"  for (let i = 0; i < 4; i++) {\r",
									"    const digit = Math.floor(Math.random() * 3);\r",
									"    serialNumber += digit;\r",
									"  }\r",
									"  return serialNumber;\r",
									"}\r",
									"pm.variables.set('serialNumber', serialNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{CreateBatchName}}-{{serialNumber}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId1}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By invalid batchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/{{InvalidBatchName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{InvalidBatchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By Invalid ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/{{InvalidProgramId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								"{{InvalidProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/{{InvalidBatchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{InvalidBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By invalid searchstring",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/?searchString={{InvalidsearchString}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								""
							],
							"query": [
								{
									"key": "searchString",
									"value": "{{InvalidsearchString}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update empty value for  field batchdescription",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"//     pm.test(\"BatchName has teamName\", function () {\r",
									"//         pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"//     });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchId with valid batchName Copy 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update null value to batchName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchStatus to invalid status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"Offline\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update BatchName with SpecialCharacters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchName\": \"{{batchName}}-&*34\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batchNoOfClasses with letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":\"TX\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update BatchDescription with SpecialCharacters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{\r",
									"      pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"      });\r",
									"   \r",
									"    \r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"     \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.batchName).to.not.null;\r",
									"    pm.expect(reqBody.batchNoOfClasses).to.not.null;\r",
									"    pm.expect(reqBody.batchStatus).to.not.null;\r",
									"    pm.expect(reqBody.batchId).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.batchName).to.be.a(\"string\");\r",
									"//   //pm.expect(response.batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"//   //pm.expect(response.batchId).to.be.an(\"number\");\r",
									"//   //pm.expect(response.programId).to.be.an(\"number\");\r",
									"//  pm.expect(response.programName).to.be.an(\"string\");\r",
									"// });\r",
									"    // pm.test(\"BatchName has teamName\", function () {\r",
									"    //     pm.expect(pm.response.text).to.include(\"TechGeeks\");\r",
									"    // });\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdatebatchDescription}}@123%\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{UpdatebatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Module",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201){\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"const userId = response.userId;\r",
									"const roleId = response.roleId\r",
									"console.log(userId);\r",
									"pm.globals.set(\"userId\", userId);\r",
									"pm.globals.set(\"roleId\", roleId);\r",
									"\r",
									"const schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response Contains valid Json data\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const reqBody = pm.request.body;\r",
									"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
									"    pm.expect(reqBody.userEduUg).to.not.null;\r",
									"    pm.expect(reqBody.userFirstName).to.not.null;\r",
									"    pm.expect(reqBody.userLastName).to.not.null;\r",
									"    pm.expect(reqBody.userLinkedinUrl).to.not.null;\r",
									"    pm.expect(reqBody.userLocation).to.not.null;\r",
									"    pm.expect(reqBody.userEduPg).to.not.null;\r",
									"    pm.expect(reqBody.roleId).to.not.null;\r",
									"    pm.expect(reqBody.userLoginEmail).to.not.null;\r",
									"    pm.expect(reqBody.userMiddleName).to.not.null;\r",
									"    pm.expect(reqBody.userLinkedinUrl).to.not.null;\r",
									"    pm.expect(reqBody.userPhoneNumber).to.not.null;\r",
									"    pm.expect(reqBody.userRoleStatus).to.not.null;\r",
									"    pm.expect(reqBody.userTimeZone).to.not.null;\r",
									"    pm.expect(reqBody.userVisaStatus).to.not.null;\r",
									"});\r",
									"// pm.test(\"Data Type Validation\", () => {\r",
									"//   pm.expect(response).to.be.an(\"object\");\r",
									"//   pm.expect(response.userEduUg).to.be.a(\"string\");\r",
									"//   pm.expect(response.userFirstName).to.be.a(\"string\");\r",
									"//   pm.expect(response.userLastName).to.be.an(\"string\");\r",
									"//   pm.expect(response.userLinkedinUrl).to.be.an(\"string\");\r",
									"//   pm.expect(response.userLocation).to.be.a(\"string\");\r",
									"//   pm.expect(response.userLoginEmail).to.be.an(\"string\");\r",
									"//   pm.expect(response.userMiddleName).to.be.a(\"string\");\r",
									"//   pm.expect(response.userPhoneNumber).to.be.an(\"number\");\r",
									"//   pm.expect(response.roleId).to.be.a(\"string\");\r",
									"//   pm.expect(response.userRoleStatus).to.be.an(\"string\");\r",
									"//   pm.expect(response.userTimeZone).to.be.a(\"string\");\r",
									"//   pm.expect(response.userVisaStatus).to.be.an(\"string\");\r",
									"//   pm.expect(response.userId).to.be.an(\"string\");\r",
									"\r",
									"// });\r",
									"    pm.test(\"Firstname has teamName\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"TechGeeks\");\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Content-Type header should be 'application/json'\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"} \r",
									"else if (pm.response.code == 400){\r",
									"\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        postman.setNextRequest(\"logout\")\r",
									"    });\r",
									"}\r",
									"\r",
									"// const iterationCount = pm.info.iterationCount;\r",
									"// console.log(iterationCount);\r",
									"// const currentIteration = (pm.info.iteration);\r",
									"// console.log(currentIteration);\r",
									"// pm.collectionVariables.set(\"currentIteration\", currentIteration);\r",
									"// pm.collectionVariables.set(\"iterationCount\", iterationCount);\r",
									"// if ((currentIteration + 1) < iterationCount)\r",
									"// {\r",
									"//     postman.setNextRequest(null);\r",
									"// }\r",
									"// else\r",
									"// {\r",
									"//     postman.setNextRequest(\"Get All Users with Valid URL, Invalid EP\");\r",
									"// }\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with existing EmailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5672237950,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with existing Phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5671237950,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, INValid EP, Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedID.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5671237950,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStat",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5672237950,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing Lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5672237950,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing RoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874564526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing Role Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874564526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing TimeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874564526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing PhoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing VisaStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874564526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing MiddleName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"\",\r\n  \"userPhoneNumber\": 5874564526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing EDuPG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing EDuUG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with missing LoginEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with Invalid TimeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"abc\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with Invalid phonenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874563 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with Valid URL, Valid EP, Valid Data with Existing User's LinkedIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"ok\",\r\n  \"userEduPg\": \"puc\",\r\n  \"userEduUg\": \"mba\",\r\n  \"userFirstName\": \"jelly\",\r\n  \"userLastName\": \"hop\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/jellyhop\",\r\n  \"userLocation\": \"India\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"jelly@hop1.com\",\r\n    \"password\": \"SDET!!\",\r\n    \"roleIds\": [\r\n      \"R01\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"jelly@hop1.com\"\r\n  },\r\n  \"userMiddleName\": \"K\",\r\n  \"userPhoneNumber\": 5874553526 ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"IST\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Valid URL, Invalid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/use",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"use"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Roles with Valid URL, InValid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/role",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by UserID with Valid URL & Valid EP & InValid UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{InvalidUserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{InvalidUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles, Valid URL, InValid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/role",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  count of Active and Inactive users with Valid URL &InValid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/byStat",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"byStat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Count of Active & Inactive with InValid-roleID & Valid URL, Valid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/byStatus?id={{Invalid-RoleID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Invalid-RoleID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Count of Active & Inactive with roleID & Valid URL, Valid EP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let statusValues = pm.globals.get(\"statusValues\")\r",
									"\r",
									"// if (!statusValues || statusValues.length==0) {\r",
									"//     statusValues = [\"R01\", \"R02\", \"R03\"];\r",
									"// }\r",
									"\r",
									"// let currentStatus = statusValues.shift()\r",
									"// console.log(currentStatus)\r",
									"// pm.globals.set(\"status\", currentStatus)\r",
									"// pm.globals.set(\"statusValues\", statusValues)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/byStatus?id=R01",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"byStatus"
							],
							"query": [
								{
									"key": "id",
									"value": "R01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Valid URL, Valid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Roles with Valid URL, Valid EP",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/roles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles, Valid URL, Valid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/roles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  count of Active and Inactive users with Valid URL &Valid EP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/byStatus",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"byStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User by Invalid-User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Content-Type header validation\", () => {\r",
									"//   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"// });\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"U730\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/{{InvalidUserID}} ",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{InvalidUserID}} "
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Status with Invalid-UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus/{{InvalidUserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{InvalidUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role ID with InValid-UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"R02\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleId/{{InvalidUserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleId",
								"{{InvalidUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Program Batch Status-Invalid UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"programId\": {{programId}},\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleProgramBatchStatus/{{InvalidUserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{InvalidUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User by User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"U730\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}} ",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}} "
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Content-Type header validation\", () => {\r",
									"//   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"// });\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleStatus/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Content-Type header validation\", () => {\r",
									"//   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"// });\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"R02\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleId/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleId",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Program Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"programId\": {{programId}},\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/roleProgramBatchStatus/{{userId}} ",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userId}} "
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, InValid UserID, Valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{InvalidUserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{InvalidUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Null UserID, Valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, invalid RoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R04\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{Invalid-RoleID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{Invalid-RoleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, missing EmailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, missing Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, invalid Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"11Active\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, invalid emailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"butte4rwxyz\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, existing emailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200){\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});}\r",
									"else{\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"jk@mnop3.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User LoginStatus with Valid URL, Valid EP, Valid UserID, Valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200){\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});}\r",
									"else{\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"SDET!!\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"butte4r@wxyz.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/userLogin/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by invalid-Role ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/roles/{{Invalid-RoleID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roles",
								"{{Invalid-RoleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Invalid-Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programs/{{InvalidProgramId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programs",
								"{{InvalidProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Invalid Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programBatch/{{InvalidBatchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{InvalidBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by Role ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/roles/{{roleId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"roles",
								"{{roleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programs/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programs",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by Role Id V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 400)\r",
									"{\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/v2/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (pm.response.code == 200)\r",
									"{ \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"else if(pm.response.code == 404)\r",
									"{\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Line Validation\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programBatch/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{batchId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Bearer-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batches of a User by User ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batches of all Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Operation",
			"item": [
				{
					"name": "Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/{{InvalidBatchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{InvalidBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program by Invalid Program ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/deletebyprogid/{{InvalidProgramId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogid",
								"{{InvalidProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program by Invalid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/deletebyprogname/{{InvalidProgramName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogname",
								"{{InvalidProgramName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program/Batches Assigned to a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/deleteAll/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/{{batchId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deletebyprogname/{{programName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogname",
								"{{programName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deletebyprogid/{{programId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogid",
								"{{programId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Logout",
			"item": [
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/logoutlms",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Bearer-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "currentIteration",
			"value": ""
		},
		{
			"key": "iterationCount",
			"value": ""
		},
		{
			"key": "skipProgramRequest",
			"value": ""
		},
		{
			"key": "batchDescription",
			"value": ""
		},
		{
			"key": "batchNoOfClasses",
			"value": ""
		}
	]
}